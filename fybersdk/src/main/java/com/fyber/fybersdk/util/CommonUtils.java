package com.fyber.fybersdk.util;

import com.fyber.fybersdk.data.model.RequestParam;

import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Collections;
import java.util.List;

/**
 * Created by Ercan on 2/10/2016.
 */
public class CommonUtils {

    /**
     * Generates a hashkey with rules given in <a href ="http://developer.fyber.com/content/current/android/offer-wall/offer-api/">Fyber Mobile Offer API Documentation </a>
     * @param params parameter string generated by {@link #stringfyRequestParams(List)}
     * @return SHA1 hash of given parameters or null if an error occurred
     */
    public static String generateHashKey(String params, String apiKey){
        String hashKey = params;
        hashKey += apiKey;//already has '&' at end

        try {
            //hash with SHA1 algorithm
            hashKey = Sha1.getHash(hashKey);

        }catch (Exception e){
            e.printStackTrace();
            hashKey = null;
        }

        return hashKey == null ? hashKey : hashKey.toLowerCase() ;//just to be sure
    }

    /**
     * Builds parameters in  name=value& pairs in alphabetical order
     * <b>WARNING</b> this method leaves a "&" cahracter at the end of string
     * @param params
     * @return
     */
    public static String stringfyRequestParams(List<RequestParam> params){
        String parameterString = "";
        Collections.sort(params);//sort alphabetically;
        for(RequestParam requestParam : params ){
            parameterString += requestParam.toString()+"&";
        }

        return  parameterString;
    }

    /**
     * Returns current Unix timestamp
     * @return unix timestamp
     */
    public static String getUnixTimeStamp() {
        return String.valueOf(System.currentTimeMillis() / 1000L);
    }

    /**
     * Get IP address from first non-localhost interface
     *
     * @param useIPv4 true=return ipv4, false=return ipv6
     * @return address or empty string
     */
    public static String getIPAddress(boolean useIPv4) {
        try {
            List<NetworkInterface> interfaces = Collections.list(NetworkInterface.getNetworkInterfaces());
            for (NetworkInterface intf : interfaces) {
                List<InetAddress> addrs = Collections.list(intf.getInetAddresses());
                for (InetAddress addr : addrs) {
                    if (!addr.isLoopbackAddress()) {
                        String sAddr = addr.getHostAddress();
                        //boolean isIPv4 = InetAddressUtils.isIPv4Address(sAddr);
                        boolean isIPv4 = sAddr.indexOf(':') < 0;

                        if (useIPv4) {
                            if (isIPv4)
                                return sAddr;
                        } else {
                            if (!isIPv4) {
                                int delim = sAddr.indexOf('%'); // drop ip6 zone suffix
                                return delim < 0 ? sAddr.toUpperCase() : sAddr.substring(0, delim).toUpperCase();
                            }
                        }
                    }
                }
            }
        } catch (Exception ex) {
        } // for now eat exceptions
        return "";
    }
}
